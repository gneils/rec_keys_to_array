c Create an array with all key values for a record type.  Parse the array and update the GUI according to the user click
  1) It grab all keys to all records and creates the array.
  2) It looks for the first row that matches user request
  3) It then set all match criteria to first row values
  4) From there it updates several arrays, one for each key with unique values
  5) If a key array needs updating it is based on all prior keys matching the criteria
  6) key array is cycled through making sure value is unique.

PROGRAM
IFTHEN ( VTYPE(0,KEYNAME(0,1)) EQ 1) 
. T = GLOBALN('CASE_TYPE' , 1) | STRING
ELSE
. T = GLOBALN('CASE_TYPE' , 0) | NUMERIC
ENDIF
END PROGRAM

retrieval crwarn
string  *  32  array db_rec_keys   ( 100, 8 ) |row, key1, key2, key3, key4, key5, key6
string  *  32  array rec_key_list  ( 100, 8 ) |value, key1, key2, key3, key4, key5, key6
integer *   2  array row_pointer  ( 8 )   | next row to add to array for each key
string  *  32  array match_value   ( 8 )  | User matching criteria.  Updated when 1st match is encountered
integer *   1  key_refresh_start     | First key to refresh
integer *   1  KEY#C                   | how many keys are there
integer *   2  REC_#                   | record type number
string  *  32  rt$                   | record type name
string  * 150  txt                   | general output for debuggin
integer *   2  db_row                | database row
integer *   1  previous_keys_match   | if all previous keys match check current key value to see if it is unique
integer *   1  first_match           | First row that matched user defined criteria was encountered.  If so set all match values to current row values
string  *  32  current_value 
integer *   1  testing
integer *   1  start_key             | which key was clicked
REAL    *   8  CASE_#V
string  *  32  CASE_$V
string  *  32  KEY_NAME
integer *   1  KEY_VTYPE
string  *  32  KEY_VALUE             | Key value
string  * 123  KEY_VALUE_LABEL       | Key value label
string  * 123  DISPLAY_TEXT          | text to output to window


testing = 0  | When we have grabbed a case with the record type of interest.
window clear
first_match = 0
set row_pointer * (1)  | starting position for list
start_key = 1          | because SIR does complex things to CASE and CASESLESS DB we pass in a start value and change as needed.
key_refresh_start = start_key + dbtype(0) | note CASEID is first key
rt$ = 'AER'
REC_# = recnum(rt$)
db_row = 0 
KEY#C = nkeys(REC_#) + dbtype(0)
write ' --------------    new run    --------------'
write 'SIR key count: ' KEY#C ' WHICH USES DBTYPE(0).  FOR CASE STRUCTURED DBS THIS ADDS 1'
write 'key refresh starts at: ' key_refresh_start ' which is actually key: ' start_key
PROCESS CASES | old case is 1001
. autoset
. ifthen ( KEY#C eq 0) 
.   write 'no keys to check'
.   exit cases
. endif

c test parameters
. PROCESS REC AER |via (1)
c   simulate clicking on the first key, first value
.   CASE_$V = varget( keyname( 0, 1 ) ) 
.   CASE_#V = numbr( CASE_$V )
.   match_value(1 + dbtype(0)) = varget( keyname( REC_#, 1 + dbtype(0) ) )
.   write 'match this case: ' [varget( keyname( REC_#, dbtype(0) ) )]
.   write 'match this 1st key value: ' [match_value( 1 + dbtype(0) ) ]
.   testing = 1
.   EXIT REC
. END REC
c
. if (testing = 0) next CASE | didn't have a record.  Move to a case that does
. if (testing = 1) EXIT CASES | got a test case

END CASES
c get all of the 

execute subprocedure ["get_rec_" + format(REC_#)]
write 'total rows in db record type: ' db_row

execute subprocedure VIEW_ALL_KEYS

ifthen (KEY#C ge 1)
. execute subprocedure CREATE_MATCHED_KEY_ARRAYS
else
. write 'no keys.  exited'
. exit program
endif

execute subprocedure refresh_keys


subprocedure MAKE_ROW_OF_ALL_KEYS
C WRITE '-----------   Make ROW ADB Array     -----------'
. db_row = db_row + 1
. for each_key = 1 + dbtype(0), KEY#C
.   db_rec_keys (db_row, each_key) = varget( keyname( REC_#, each_key ) )
. end for
end subprocedure


subprocedure view_all_keys
WRITE '---------   ALL  VALUES in Array   --------'
. txt = ""
. for each_db_row = 1, db_row
. txt = format (each_db_row ) + ': ' 
.   for each_key = 1 + dbtype(0), KEY#C
.     txt = txt + db_rec_keys (each_db_row, each_key) 
.     if(each_key lt KEY#C) txt = txt + " | "
.   end for
.   write txt
. end for
end subprocedure

subprocedure CREATE_MATCHED_KEY_ARRAYS
WRITE '--------   Create Match Key Arrays --------'
. first_match = 0 | no matching row yet
. for each_db_row = 1, db_row
|   check each row to see if it matches the criteria.  If yes, grab all key values
.   if ( first_match eq 0 ) execute subprocedure CHECK_ALL_MATCH_CRITERIA

.   for each_key = 1 + dbtype(0), KEY#C
.     current_value = db_rec_keys (each_db_row, each_key)
.     execute subprocedure previous_keys_match
.     ifthen  ( previous_keys_match = 0 ) 
write 'each_key: ' each_key ' previous key values did not match.' 
.       exit for | all key values before this value must match
.     endif
.     execute subprocedure is_value_unique    | if unique add to list
.   end for
. end for
end subprocedure

subprocedure refresh_keys
| here cycle through keys, start with first that needs to be updated. append list
WRITE // '-----------   show values to update -----------'
WRITE 'These keys: ' [key_refresh_start ] ' - ' KEY#C
. for each_key = key_refresh_start , KEY#C 
write 'key ' each_key '.  # of values to update: ' [row_pointer(each_key) - 1 ]
.   for each_row = 1, row_pointer(each_key) - 1
.       key_name = keyname( REC_#, each_key ) 
.       key_value = rec_key_list( each_row, each_key )
.       key_vtype = vtype( REC_#, key_name )
.       ifthen ( key_vtype eq 1 or 3 or 4) 
.         key_value_label = trim( fst( vallabsc ( REC_#, key_name, key_value), "" ) )
.       else
.         key_value_label = trim( fst( vallabsc ( REC_#, key_name, numbr( key_value ) ) , "" ) )
.       endif
.       DISPLAY_TEXT = key_value + key_value_label
write DISPLAY_TEXT
c .       write 5t '  row: ' each_row   
                 ' value: ' key_value
                 ' label: ' key_value_label

.   end for
. end for
end subprocedure 

subprocedure previous_keys_match
c write '-----------   previous_keys_match   ---------------'
. ifthen (each_key eq 1 + dbtype(0) ) | special rule for first keys
.   previous_keys_match = 1
.   exit subprocedure
. endif
. previous_keys_match = 0 
. for check_key = 1 + dbtype(0), each_key - 1  | Check all keys up to but not including current key
| write 'checking key: ' check_key '.  db value: ' db_rec_keys (each_db_row, check_key ) ' and match value: ' match_value (check_key) 
.   ifthen ( db_rec_keys (each_db_row, check_key ) eq match_value (check_key) )
.     previous_keys_match = 1
.   else
write 5t 'failed match: ' db_rec_keys (each_db_row, check_key ) ' != ' match_value (check_key)
.     previous_keys_match = 0 
.     exit subprocedure | can exit immediately when a single match fails
.  endif
. end for
end subprocedure

subprocedure is_value_unique
. for each_element = 1, row_pointer(each_key)
| write 5t 'value check: ' rec_key_list ( each_element, each_key ) ' ?= 'current_value 
.   ifthen ( rec_key_list ( each_element, each_key ) eq current_value ) 
| write 'Is value unique: NO! key: ' each_key ' found value: ' current_value
.     exit subprocedure | value is already in list move on.
.   endif
. end for
write 'adding value to key: ' each_key ' = '  current_value 
. rec_key_list (row_pointer(each_key), each_key ) = current_value
. row_pointer(each_key) = row_pointer(each_key) + 1
end subprocedure 

subprocedure CHECK_ALL_MATCH_CRITERIA
write '------ Looking for First Match   ----------'
. if(first_match eq 1) exit subprocedure | values already set
. ifthen (key_refresh_start eq 1 + dbtype(0) ) | special rule for first keys- grab first row
.   first_match = 1
. else | if all keys upto match key match set flag
c write 'checking for matched row' 
.   for match_key = 1 + dbtype(0), key_refresh_start - 1
c write 'key' match_key 'DB:'  db_rec_keys (each_db_row, match_key)  ' value: ' match_value( match_key ) 
.     ifthen(  match_value( match_key ) = db_rec_keys (each_db_row, match_key) )
.       first_match = 1 
.     else
.       first_match = 0
.       exit subprocedure
.     endif
.   end for
. endif
. ifthen (first_match eq 1) | set all of the match values.
write 'settting match criteria: ' 
.   for match_key = 1 + dbtype(0), KEY#C
write 'key ' match_key ' value ' db_rec_keys (each_db_row, match_key)
.       match_value( match_key ) = db_rec_keys (each_db_row, match_key)
.   end for
. endif
end subprocedure


do repeat RECX = <GREC1>
                 <GREC2>
                 <GREC3>
                 <GREC4>
. SUBPROCEDURE get_rec_!RECX
CIF EQ 1, 0<CASE_TYPE>
.   OLD CASE IS CASE_$V
CIF FALSE
.   OLD CASE IS CASE_#V
CIF END
.     PROCESS REC RECX
.       execute subprocedure MAKE_ROW_OF_ALL_KEYS
.     END REC
.   END CASE IS
. END SUBPROCEDURE
end repeat

subprocedure SET_KEY_REFRESH_START
. key_refresh_start = start_key + dbtype(0) | note CASEID is first key
end subprocedure

end retrieval